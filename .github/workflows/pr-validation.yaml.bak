name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

jobs:
  labeler:
    name: Auto Label PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Determine PR size
        id: pr-size
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const additions = pr.additions;
            const deletions = pr.deletions;
            const total = additions + deletions;
            
            let size;
            if (total < 10) size = 'XS';
            else if (total < 50) size = 'S';
            else if (total < 250) size = 'M';
            else if (total < 500) size = 'L';
            else size = 'XL';
            
            core.setOutput('size', size);
            core.setOutput('additions', additions);
            core.setOutput('deletions', deletions);
            
      - name: Apply size label
        uses: actions/github-script@v7
        with:
          script: |
            const size = '${{ steps.pr-size.outputs.size }}';
            const labels = ['size/XS', 'size/S', 'size/M', 'size/L', 'size/XL'];
            
            // Remove existing size labels
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            for (const label of currentLabels) {
              if (labels.includes(label.name)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label.name
                });
              }
            }
            
            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [`size/${size}`]
            });
            
      - name: Label based on files changed
        uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/labeler.yml
          sync-labels: false

  quality-gates:
    name: Quality Gate Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for some checks
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json
          
      - name: Install dependencies
        working-directory: mcp-server
        run: npm ci
        
      - name: Check code formatting
        id: format-check
        working-directory: mcp-server
        run: |
          npm run format:check || echo "format_failed=true" >> $GITHUB_OUTPUT
          
      - name: Run linting
        id: lint-check
        working-directory: mcp-server
        run: |
          npm run lint || echo "lint_failed=true" >> $GITHUB_OUTPUT
          
      - name: Check TypeScript compilation
        id: typescript-check
        working-directory: mcp-server
        run: |
          npm run build || echo "build_failed=true" >> $GITHUB_OUTPUT
          
      - name: Run tests with coverage
        id: test-check
        working-directory: mcp-server
        run: |
          npm run test:coverage || echo "test_failed=true" >> $GITHUB_OUTPUT
          
          # Extract coverage percentage
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            
            if (( $(echo "$COVERAGE < 90" | bc -l) )); then
              echo "coverage_failed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
            echo "coverage_failed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Check for security vulnerabilities
        id: security-check
        working-directory: mcp-server
        run: |
          npm audit --audit-level=high || echo "audit_failed=true" >> $GITHUB_OUTPUT
          
      - name: Documentation completeness check
        id: docs-check
        run: |
          DOCS_COMPLETE=true
          
          # Check for required documentation files
          for file in README.md CHANGELOG.md mcp-server/DOCS.md mcp-server/API.md; do
            if [ ! -f "$file" ]; then
              echo "Missing required documentation: $file"
              DOCS_COMPLETE=false
            fi
          done
          
          if [ "$DOCS_COMPLETE" = "false" ]; then
            echo "docs_failed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate quality report
        id: quality-report
        run: |
          echo "## 📊 Quality Gate Report" >> quality-report.md
          echo "" >> quality-report.md
          echo "| Check | Status | Details |" >> quality-report.md
          echo "|-------|--------|---------|" >> quality-report.md
          
          # Format check
          if [ "${{ steps.format-check.outputs.format_failed }}" == "true" ]; then
            echo "| Code Formatting | ❌ Failed | Run \`npm run format\` to fix |" >> quality-report.md
            QUALITY_PASSED=false
          else
            echo "| Code Formatting | ✅ Passed | Code is properly formatted |" >> quality-report.md
          fi
          
          # Lint check
          if [ "${{ steps.lint-check.outputs.lint_failed }}" == "true" ]; then
            echo "| Linting | ❌ Failed | Fix linting errors |" >> quality-report.md
            QUALITY_PASSED=false
          else
            echo "| Linting | ✅ Passed | No linting issues |" >> quality-report.md
          fi
          
          # TypeScript check
          if [ "${{ steps.typescript-check.outputs.build_failed }}" == "true" ]; then
            echo "| TypeScript Build | ❌ Failed | Fix compilation errors |" >> quality-report.md
            QUALITY_PASSED=false
          else
            echo "| TypeScript Build | ✅ Passed | Compilation successful |" >> quality-report.md
          fi
          
          # Test coverage check
          COVERAGE="${{ steps.test-check.outputs.coverage }}"
          if [ "${{ steps.test-check.outputs.test_failed }}" == "true" ]; then
            echo "| Tests | ❌ Failed | Tests are failing |" >> quality-report.md
            QUALITY_PASSED=false
          elif [ "${{ steps.test-check.outputs.coverage_failed }}" == "true" ]; then
            echo "| Test Coverage | ⚠️ Below 90% | Current: ${COVERAGE}% (Required: 90%) |" >> quality-report.md
            QUALITY_PASSED=false
          else
            echo "| Test Coverage | ✅ Passed | Coverage: ${COVERAGE}% |" >> quality-report.md
          fi
          
          # Security check
          if [ "${{ steps.security-check.outputs.audit_failed }}" == "true" ]; then
            echo "| Security Audit | ❌ Failed | High/Critical vulnerabilities found |" >> quality-report.md
            QUALITY_PASSED=false
          else
            echo "| Security Audit | ✅ Passed | No high/critical vulnerabilities |" >> quality-report.md
          fi
          
          # Documentation check
          if [ "${{ steps.docs-check.outputs.docs_failed }}" == "true" ]; then
            echo "| Documentation | ❌ Incomplete | Missing required docs |" >> quality-report.md
            QUALITY_PASSED=false
          else
            echo "| Documentation | ✅ Complete | All required docs present |" >> quality-report.md
          fi
          
          echo "" >> quality-report.md
          
          if [ "$QUALITY_PASSED" = "false" ]; then
            echo "### ❌ Quality gates not met" >> quality-report.md
            echo "quality_passed=false" >> $GITHUB_OUTPUT
          else
            echo "### ✅ All quality gates passed" >> quality-report.md
            echo "quality_passed=true" >> $GITHUB_OUTPUT
          fi
          
          cat quality-report.md >> $GITHUB_STEP_SUMMARY
          
      - name: Comment PR with quality report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Quality Gate Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }
            
      - name: Set PR status
        uses: actions/github-script@v7
        with:
          script: |
            const passed = '${{ steps.quality-report.outputs.quality_passed }}' === 'true';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: passed ? 'success' : 'failure',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: passed ? 'All quality gates passed' : 'Quality gates failed',
              context: 'Quality Gates'
            });

  pr-metrics:
    name: PR Metrics
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Calculate PR metrics
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Calculate time since PR opened
            const opened = new Date(pr.created_at);
            const now = new Date();
            const ageHours = Math.floor((now - opened) / (1000 * 60 * 60));
            const ageDays = Math.floor(ageHours / 24);
            
            // Get number of commits
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Get review status
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const approvals = reviews.filter(r => r.state === 'APPROVED').length;
            const changesRequested = reviews.filter(r => r.state === 'CHANGES_REQUESTED').length;
            
            // Create metrics summary
            let summary = `## 📈 PR Metrics\n\n`;
            summary += `- **Age:** ${ageDays} days, ${ageHours % 24} hours\n`;
            summary += `- **Commits:** ${commits.length}\n`;
            summary += `- **Changes:** +${pr.additions} / -${pr.deletions}\n`;
            summary += `- **Files Changed:** ${pr.changed_files}\n`;
            summary += `- **Reviews:** ${approvals} approvals, ${changesRequested} changes requested\n`;
            
            if (pr.draft) {
              summary += `\n⚠️ **This is a draft PR**\n`;
            }
            
            if (ageDays > 7) {
              summary += `\n⚠️ **This PR has been open for more than a week**\n`;
            }
            
            core.summary.addRaw(summary).write();