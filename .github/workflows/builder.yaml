name: Builder

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

env:
  BUILD_ARGS: "--test"
  MONITORED_FILES: "build.yaml config.yaml Dockerfile run.sh"
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_files
        uses: dorny/paths-filter@v2
        with:
          filters: |
            mcp-server:
              - 'mcp-server/**'

      - name: Find add-on directories
        id: changed_addons
        run: |
          if [[ "${{ steps.changed_files.outputs.mcp-server }}" == "true" ]]; then
            echo "addons=[\"mcp-server\"]" >> $GITHUB_OUTPUT
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "addons=[]" >> $GITHUB_OUTPUT
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: init
    runs-on: ubuntu-latest
    if: needs.init.outputs.changed == 'true'
    name: Build ${{ matrix.addon }} add-on
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Get information
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: "./${{ matrix.addon }}"

      - name: Check if add-on should be built
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
            echo "push=true" >> $GITHUB_OUTPUT
          else
            echo "build=true" >> $GITHUB_OUTPUT
            echo "push=false" >> $GITHUB_OUTPUT
          fi

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        if: steps.check.outputs.build == 'true'
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx for advanced caching
      - name: Set up Docker Buildx
        if: steps.check.outputs.build == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            image=moby/buildkit:master
            network=host

      # Cache Docker layers using GitHub Actions cache
      - name: Cache Docker layers
        if: steps.check.outputs.build == 'true'
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.addon }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.addon }}-
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        if: steps.check.outputs.build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test build ${{ matrix.addon }} add-on
        if: steps.check.outputs.build == 'true' && steps.check.outputs.push == 'false'
        uses: home-assistant/builder@master
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_INLINE_CACHE: 1
        with:
          args: |
            --test \
            --all \
            --target /data/${{ matrix.addon }} \
            --docker-hub "ghcr.io/${{ github.repository_owner }}" \
            --image "${{ steps.info.outputs.image }}"

      - name: Build and push ${{ matrix.addon }} add-on
        if: steps.check.outputs.build == 'true' && steps.check.outputs.push == 'true'
        uses: home-assistant/builder@master
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_INLINE_CACHE: 1
        with:
          args: |
            --all \
            --target /data/${{ matrix.addon }} \
            --docker-hub "ghcr.io/${{ github.repository_owner }}" \
            --image "${{ steps.info.outputs.image }}"