name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mtebusi/ha_mcp

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
      
      - name: Validate semantic version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "Invalid semantic version: $VERSION"
            exit 1
          fi
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Previous tag: $PREV_TAG"
            COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create changelog
          {
            echo "changelog<<EOF"
            echo "## What's Changed"
            echo ""
            echo "### Features"
            echo "$COMMITS" | grep -E "^- (feat|feature):" || echo "No new features"
            echo ""
            echo "### Bug Fixes"
            echo "$COMMITS" | grep -E "^- (fix|bugfix):" || echo "No bug fixes"
            echo ""
            echo "### Documentation"
            echo "$COMMITS" | grep -E "^- (docs|doc):" || echo "No documentation changes"
            echo ""
            echo "### Other Changes"
            echo "$COMMITS" | grep -vE "^- (feat|feature|fix|bugfix|docs|doc):" || echo "No other changes"
            echo ""
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...v${{ steps.version.outputs.version }}"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  build-multi-arch:
    name: Build Multi-arch Images
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
          - arch: aarch64
            platform: linux/arm64
          - arch: armv7
            platform: linux/arm/v7
          - arch: armhf
            platform: linux/arm/v6
          - arch: i386
            platform: linux/386
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Log in to Docker Hub
        if: vars.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./mcp-server
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/mtebusi/${{ matrix.arch }}-addon-mcp-claude:${{ needs.prepare-release.outputs.version }}
            ${{ env.REGISTRY }}/mtebusi/${{ matrix.arch }}-addon-mcp-claude:latest
          labels: |
            org.opencontainers.image.version=${{ needs.prepare-release.outputs.version }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}
            io.hass.arch=${{ matrix.arch }}
            io.hass.type=addon
            io.hass.version=${{ needs.prepare-release.outputs.version }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.arch }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.arch }},mode=max
          build-args: |
            BUILD_ARCH=${{ matrix.arch }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
            BUILD_REF=${{ github.sha }}
            BUILD_VERSION=${{ needs.prepare-release.outputs.version }}

  create-manifest:
    name: Create Multi-arch Manifest
    runs-on: ubuntu-latest
    needs: [prepare-release, build-multi-arch]
    
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create and push manifest  
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          # Note: Since we're using architecture-prefixed image names,
          # HomeAssistant will automatically select the correct image based on the architecture
          # No manifest creation needed - HomeAssistant handles this via the {arch} placeholder
          
          echo "Architecture-specific images have been pushed:"
          echo "  - ghcr.io/mtebusi/amd64-addon-mcp-claude:${VERSION}"
          echo "  - ghcr.io/mtebusi/aarch64-addon-mcp-claude:${VERSION}"
          echo "  - ghcr.io/mtebusi/armv7-addon-mcp-claude:${VERSION}"
          echo "  - ghcr.io/mtebusi/armhf-addon-mcp-claude:${VERSION}"
          echo "  - ghcr.io/mtebusi/i386-addon-mcp-claude:${VERSION}"

  update-addon-repository:
    name: Update Add-on Repository
    runs-on: ubuntu-latest
    needs: [prepare-release, create-manifest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Update config.yaml version
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          sed -i "s/version:.*/version: \"${VERSION}\"/" mcp-server/config.yaml
      
      - name: Update repository.json
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          if [ -f mcp-server/repository.json ]; then
            jq ".version = \"${VERSION}\" | .last_update = \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" mcp-server/repository.json > tmp.json && mv tmp.json mcp-server/repository.json
          fi
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update add-on to version ${{ needs.prepare-release.outputs.version }}"
          title: "Release: Update add-on to v${{ needs.prepare-release.outputs.version }}"
          body: |
            ## Automated Release Update
            
            This PR updates the add-on configuration files for version ${{ needs.prepare-release.outputs.version }}.
            
            ### Changes
            - Updated version in `config.yaml`
            - Updated version and timestamp in `repository.json`
            
            ### Changelog
            ${{ needs.prepare-release.outputs.changelog }}
          branch: release/v${{ needs.prepare-release.outputs.version }}
          delete-branch: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-manifest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: Release v${{ needs.prepare-release.outputs.version }}
          body: |
            # HomeAssistant MCP Server Add-on v${{ needs.prepare-release.outputs.version }}
            
            ${{ needs.prepare-release.outputs.changelog }}
            
            ## Installation
            
            ### Add-on Installation
            1. Add this repository to your Home Assistant: `https://github.com/${{ github.repository }}`
            2. Install the "MCP Server for Claude" add-on
            3. Configure and start the add-on
            
            ### Docker Images
            Multi-architecture images are available at:
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            Supported architectures:
            - `amd64` (x86_64)
            - `aarch64` (ARM64)
            - `armv7` (ARM32v7)
            - `armhf` (ARM32v6)
            - `i386` (x86)
            
            ## Claude Extension
            The Claude Desktop extension is included as an attachment to this release.
          files: |
          draft: false
          prerelease: false
          generate_release_notes: true

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    if: always()
    
    steps:
      - name: Create summary
        run: |
          echo "# Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Version: ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.create-github-release.result }}" == "success" ]; then
            echo "### ✅ Release Published Successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "[View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Release Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}`" >> $GITHUB_STEP_SUMMARY
          echo "- Version: `${{ needs.prepare-release.outputs.version }}`" >> $GITHUB_STEP_SUMMARY
          echo "- Latest: `latest`" >> $GITHUB_STEP_SUMMARY