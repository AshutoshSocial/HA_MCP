name: Unified Build & Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.1.6)'
        required: false
        default: '1.1.6'
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: addon-mcp-claude
  VERSION: ${{ github.event.inputs.version || '1.2.1' }}

jobs:
  build-addon:
    name: Build add-on for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: ["aarch64", "amd64", "armhf", "armv7", "i386"]
        
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set BUILD_FROM base image
        id: base
        run: |
          case "${{ matrix.arch }}" in
            "aarch64")
              echo "BUILD_FROM=ghcr.io/home-assistant/aarch64-base:3.21" >> $GITHUB_OUTPUT
              echo "PLATFORM=linux/arm64" >> $GITHUB_OUTPUT
              ;;
            "amd64")
              echo "BUILD_FROM=ghcr.io/home-assistant/amd64-base:3.21" >> $GITHUB_OUTPUT
              echo "PLATFORM=linux/amd64" >> $GITHUB_OUTPUT
              ;;
            "armhf")
              echo "BUILD_FROM=ghcr.io/home-assistant/armhf-base:3.21" >> $GITHUB_OUTPUT
              echo "PLATFORM=linux/arm/v6" >> $GITHUB_OUTPUT
              ;;
            "armv7")
              echo "BUILD_FROM=ghcr.io/home-assistant/armv7-base:3.21" >> $GITHUB_OUTPUT
              echo "PLATFORM=linux/arm/v7" >> $GITHUB_OUTPUT
              ;;
            "i386")
              echo "BUILD_FROM=ghcr.io/home-assistant/i386-base:3.21" >> $GITHUB_OUTPUT
              echo "PLATFORM=linux/386" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          buildkitd-flags: --debug

      - name: Build and push ${{ matrix.arch }}
        uses: docker/build-push-action@v5
        with:
          context: ./mcp-server
          file: ./mcp-server/Dockerfile
          platforms: ${{ steps.base.outputs.PLATFORM }}
          build-args: |
            BUILD_FROM=${{ steps.base.outputs.BUILD_FROM }}
            VERSION=${{ env.VERSION }}
          push: ${{ github.event_name != 'pull_request' && github.event.inputs.push_images != 'false' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-${{ matrix.arch }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.arch }}
          cache-from: |
            type=gha,scope=${{ matrix.arch }}
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.arch }}
          cache-to: |
            type=gha,scope=${{ matrix.arch }},mode=max
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.arch }},mode=max
          provenance: false
          outputs: type=image,push=true
          labels: |
            io.hass.name="MCP Server for Claude"
            io.hass.description="Model Context Protocol server for Claude AI integration"
            io.hass.type="addon"
            io.hass.version=${{ env.VERSION }}
            io.hass.arch=${{ matrix.arch }}
            maintainer="Matt Busi"

  create-manifest:
    name: Create multi-arch manifest
    runs-on: ubuntu-latest
    needs: build-addon
    if: github.event_name != 'pull_request' && github.event.inputs.push_images != 'false'
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for images to propagate
        run: |
          echo "Waiting for all architecture images to be available..."
          sleep 30
          for arch in aarch64 amd64 armhf armv7 i386; do
            echo "Checking $arch..."
            docker pull ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-${arch} || exit 1
          done

      - name: Create and push manifest for version tag
        run: |
          # Remove any existing manifest
          docker manifest rm ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} 2>/dev/null || true
          
          # Create fresh manifest
          docker manifest create \
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
            --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-aarch64 \
            --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-amd64 \
            --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-armhf \
            --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-armv7 \
            --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-i386
          
          docker manifest push --purge ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Create and push manifest for latest tag
        run: |
          # Remove any existing manifest
          docker manifest rm ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest 2>/dev/null || true
          
          # Create fresh manifest
          docker manifest create \
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest \
            --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest-aarch64 \
            --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest-amd64 \
            --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest-armhf \
            --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest-armv7 \
            --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest-i386
          
          docker manifest push --purge ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

      - name: Inspect manifest
        run: |
          echo "Manifest for version ${{ env.VERSION }}:"
          docker manifest inspect ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          
          echo ""
          echo "Manifest for latest:"
          docker manifest inspect ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

  test-images:
    name: Test built images
    runs-on: ubuntu-latest
    needs: create-manifest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        arch: ["amd64"]  # Test on native architecture only in CI
        
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test image has S6 overlay
        run: |
          echo "Testing that the image has the S6 overlay init system..."
          docker run --rm --entrypoint /bin/sh \
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-${{ matrix.arch }} \
            -c "ls -la /init && ls -la /usr/bin/bashio || echo 'Missing bashio' && ls -la /etc/s6-overlay || echo 'Missing S6 overlay'"
          
      - name: Test image startup
        run: |
          echo "Testing that the image can start (will fail without config, but should find /init)..."
          timeout 5 docker run --rm \
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-${{ matrix.arch }} \
            || EXIT_CODE=$?
          
          # We expect it to fail (exit code 124 from timeout or other error), but not with "exec /init failed"
          if [ "$EXIT_CODE" = "126" ] || [ "$EXIT_CODE" = "127" ]; then
            echo "ERROR: /init not found or not executable!"
            exit 1
          else
            echo "Image has /init and attempted to start (expected failure without config)"
          fi