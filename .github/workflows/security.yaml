name: Security Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - codeql
          - dependencies
          - container
          - secrets

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'codeql' || github.event.inputs.scan_type == '' }}
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == '' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json
          
      - name: Install dependencies
        working-directory: mcp-server
        run: npm ci
        
      - name: Run npm audit
        working-directory: mcp-server
        run: |
          npm audit --json > audit-report.json || true
          if [ -f audit-report.json ]; then
            echo "## NPM Audit Report" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat audit-report.json | jq '.vulnerabilities | to_entries | map({
              name: .key,
              severity: .value.severity,
              via: .value.via[0].title
            })' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=mcp-server/package.json
          
      - name: Upload dependency scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif
          category: dependency-scan

  container-scan:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == '' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: mcp-server
          push: false
          load: true
          tags: mcp-server:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: mcp-server:scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: container-scan
          
      - name: Run Hadolint for Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: mcp-server/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true
          
      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          category: dockerfile-lint

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == '' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning
          
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified --json
          
  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == '' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json
          
      - name: Install license-checker
        run: npm install -g license-checker
        
      - name: Run license check
        working-directory: mcp-server
        run: |
          license-checker --production --summary --out licenses.json
          echo "## License Summary" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat licenses.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
      - name: Check for incompatible licenses
        working-directory: mcp-server
        run: |
          # Check for GPL, AGPL, or other copyleft licenses that might be incompatible
          license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense' || {
            echo "⚠️ Found potentially incompatible licenses" >> $GITHUB_STEP_SUMMARY
            exit 1
          }

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, container-scan, secret-scan, license-scan]
    if: always()
    
    steps:
      - name: Generate Security Summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [ "${{ needs.codeql-analysis.result }}" == "success" ]; then
            echo "| CodeQL Analysis | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| CodeQL Analysis | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "| Dependency Scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Dependency Scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.container-scan.result }}" == "success" ]; then
            echo "| Container Scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Container Scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "| Secret Scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Secret Scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.license-scan.result }}" == "success" ]; then
            echo "| License Check | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| License Check | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Full results available in the Security tab" >> $GITHUB_STEP_SUMMARY
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🔒 Security Scan Results
            
            | Scan | Status |
            |------|--------|
            | CodeQL | ${{ needs.codeql-analysis.result == 'success' && '✅' || '❌' }} |
            | Dependencies | ${{ needs.dependency-scan.result == 'success' && '✅' || '❌' }} |
            | Container | ${{ needs.container-scan.result == 'success' && '✅' || '❌' }} |
            | Secrets | ${{ needs.secret-scan.result == 'success' && '✅' || '❌' }} |
            | Licenses | ${{ needs.license-scan.result == 'success' && '✅' || '❌' }} |
            
            View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security).`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });