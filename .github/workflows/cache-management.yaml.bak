name: Cache Management

on:
  schedule:
    # Run weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      action:
        description: 'Cache action to perform'
        required: true
        default: 'report'
        type: choice
        options:
          - report
          - prune
          - analyze

jobs:
  cache-management:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup cache analysis
        id: cache-info
        run: |
          echo "## Cache Analysis Report"
          echo "Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          # Get cache usage via GitHub API
          CACHE_USAGE=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/cache/usage \
            --jq '.active_caches_size_in_bytes')
          
          CACHE_COUNT=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/cache/usage \
            --jq '.active_caches_count')
          
          # Convert bytes to MB
          CACHE_SIZE_MB=$((CACHE_USAGE / 1024 / 1024))
          
          echo "cache_size_mb=$CACHE_SIZE_MB" >> $GITHUB_OUTPUT
          echo "cache_count=$CACHE_COUNT" >> $GITHUB_OUTPUT
          
          echo "### Current Cache Status"
          echo "- Total cache size: ${CACHE_SIZE_MB} MB"
          echo "- Active cache entries: ${CACHE_COUNT}"
          echo "- GitHub limit: 10 GB"
          echo "- Usage: $((CACHE_SIZE_MB * 100 / 10240))%"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: List cache entries
        if: inputs.action == 'analyze' || inputs.action == 'report'
        run: |
          echo ""
          echo "### Cache Entries (Last 20)"
          
          gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/actions/caches?per_page=20" \
            --jq '.actions_caches[] | "- \(.key) (\(.size_in_bytes / 1024 / 1024 | floor) MB) - Created: \(.created_at)"'
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Analyze cache patterns
        if: inputs.action == 'analyze'
        run: |
          echo ""
          echo "### Cache Pattern Analysis"
          
          # Get all cache keys and analyze patterns
          gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/actions/caches?per_page=100" \
            --jq '.actions_caches[].key' | \
          awk -F'-' '{
            if ($0 ~ /npm/) npm_count++
            if ($0 ~ /buildx/) buildx_count++
            if ($0 ~ /tsbuild/) ts_count++
            total++
          }
          END {
            print "- NPM caches: " npm_count " (" int(npm_count*100/total) "%)"
            print "- Docker buildx caches: " buildx_count " (" int(buildx_count*100/total) "%)"
            print "- TypeScript build caches: " ts_count " (" int(ts_count*100/total) "%)"
            print "- Total entries: " total
          }'
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Prune old caches
        if: inputs.action == 'prune'
        run: |
          echo ""
          echo "### Pruning Old Caches"
          
          # Delete caches older than 7 days
          CUTOFF_DATE=$(date -u -d '7 days ago' '+%Y-%m-%dT%H:%M:%SZ')
          
          DELETED_COUNT=0
          DELETED_SIZE=0
          
          # Get caches to delete
          CACHES_TO_DELETE=$(gh api \
            -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/actions/caches?per_page=100" \
            --jq ".actions_caches[] | select(.created_at < \"$CUTOFF_DATE\") | .id")
          
          for cache_id in $CACHES_TO_DELETE; do
            # Get cache info before deleting
            CACHE_INFO=$(gh api \
              -H "Accept: application/vnd.github+json" \
              "/repos/${{ github.repository }}/actions/caches/$cache_id" 2>/dev/null || echo "{}")
            
            if [ ! -z "$CACHE_INFO" ] && [ "$CACHE_INFO" != "{}" ]; then
              CACHE_KEY=$(echo "$CACHE_INFO" | jq -r '.key // "unknown"')
              CACHE_SIZE=$(echo "$CACHE_INFO" | jq -r '.size_in_bytes // 0')
              
              # Delete the cache
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                "/repos/${{ github.repository }}/actions/caches/$cache_id" 2>/dev/null && {
                echo "- Deleted: $CACHE_KEY ($((CACHE_SIZE / 1024 / 1024)) MB)"
                DELETED_COUNT=$((DELETED_COUNT + 1))
                DELETED_SIZE=$((DELETED_SIZE + CACHE_SIZE))
              }
            fi
          done
          
          echo ""
          echo "#### Pruning Summary"
          echo "- Caches deleted: $DELETED_COUNT"
          echo "- Space freed: $((DELETED_SIZE / 1024 / 1024)) MB"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Generate recommendations
        if: always()
        run: |
          echo ""
          echo "### Recommendations"
          
          CACHE_SIZE_MB=${{ steps.cache-info.outputs.cache_size_mb }}
          CACHE_COUNT=${{ steps.cache-info.outputs.cache_count }}
          
          if [ $CACHE_SIZE_MB -gt 8192 ]; then
            echo "⚠️ **Warning**: Cache size exceeds 8 GB. Consider pruning old entries."
          elif [ $CACHE_SIZE_MB -gt 5120 ]; then
            echo "📊 Cache usage is moderate (>5 GB). Monitor growth."
          else
            echo "✅ Cache usage is healthy (<5 GB)."
          fi
          
          if [ $CACHE_COUNT -gt 100 ]; then
            echo "⚠️ High number of cache entries. Consider consolidating cache keys."
          fi
          
          echo ""
          echo "### Next Steps"
          echo "1. Review cache hit rates in build logs"
          echo "2. Adjust cache keys if seeing many misses"
          echo "3. Run prune action if nearing 10 GB limit"
          echo "4. Monitor build times after cache warmup"