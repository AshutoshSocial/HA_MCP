name: Multi-Architecture Validation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      architecture:
        description: 'Specific architecture to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - armhf
          - armv7
          - aarch64
          - amd64
          - i386

permissions:
  contents: read
  packages: read

jobs:
  build-matrix:
    name: Build for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: armhf
            platform: linux/arm/v6
            qemu-arch: arm
            description: "Raspberry Pi 2"
          - arch: armv7
            platform: linux/arm/v7
            qemu-arch: arm
            description: "Raspberry Pi 3/4 (32-bit)"
          - arch: aarch64
            platform: linux/arm64
            qemu-arch: aarch64
            description: "Raspberry Pi 4 (64-bit)"
          - arch: amd64
            platform: linux/amd64
            qemu-arch: x86_64
            description: "Intel/AMD 64-bit"
          - arch: i386
            platform: linux/386
            qemu-arch: i386
            description: "Intel/AMD 32-bit"
    
    steps:
      - name: Should test architecture
        id: should-test
        run: |
          if [[ "${{ github.event.inputs.architecture }}" == "all" ]] || \
             [[ "${{ github.event.inputs.architecture }}" == "${{ matrix.arch }}" ]] || \
             [[ "${{ github.event.inputs.architecture }}" == "" ]]; then
            echo "test=true" >> $GITHUB_OUTPUT
          else
            echo "test=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Checkout repository
        if: steps.should-test.outputs.test == 'true'
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        if: steps.should-test.outputs.test == 'true'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}
          
      - name: Set up Docker Buildx
        if: steps.should-test.outputs.test == 'true'
        uses: docker/setup-buildx-action@v3
        
      - name: Build for ${{ matrix.arch }}
        if: steps.should-test.outputs.test == 'true'
        uses: docker/build-push-action@v5
        with:
          context: mcp-server
          platforms: ${{ matrix.platform }}
          push: false
          load: false
          tags: mcp-server:${{ matrix.arch }}-test
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}
          outputs: type=docker,dest=/tmp/mcp-server-${{ matrix.arch }}.tar
          
      - name: Load and test image
        if: steps.should-test.outputs.test == 'true'
        run: |
          docker load < /tmp/mcp-server-${{ matrix.arch }}.tar
          
          # Create test script
          cat > test-arch.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Testing architecture: $1"
          echo "Platform: $2"
          echo "Description: $3"
          
          # Run basic smoke test
          docker run --rm --platform=$2 mcp-server:$1-test node --version || exit 1
          
          # Check binary compatibility
          docker run --rm --platform=$2 mcp-server:$1-test uname -m
          
          # Test that the MCP server can at least start
          timeout 5 docker run --rm --platform=$2 \
            -e TEST_MODE=true \
            -e SUPERVISOR_TOKEN=test \
            mcp-server:$1-test || true
          
          echo "✅ Architecture $1 validation passed"
          EOF
          
          chmod +x test-arch.sh
          ./test-arch.sh "${{ matrix.arch }}" "${{ matrix.platform }}" "${{ matrix.description }}"
          
      - name: Analyze image size
        if: steps.should-test.outputs.test == 'true'
        run: |
          SIZE=$(docker image inspect mcp-server:${{ matrix.arch }}-test --format='{{.Size}}')
          SIZE_MB=$((SIZE / 1048576))
          
          echo "## Image Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "**Architecture:** ${{ matrix.arch }} (${{ matrix.description }})" >> $GITHUB_STEP_SUMMARY
          echo "**Size:** ${SIZE_MB}MB" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $SIZE_MB -gt 500 ]; then
            echo "⚠️ Image size exceeds 500MB threshold" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Image size is acceptable" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Security scan architecture-specific image
        if: steps.should-test.outputs.test == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/mcp-server-${{ matrix.arch }}.tar
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          
      - name: Upload build artifact
        if: steps.should-test.outputs.test == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-${{ matrix.arch }}
          path: /tmp/mcp-server-${{ matrix.arch }}.tar
          retention-days: 7

  cross-compile-test:
    name: Cross-Compilation Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json
          
      - name: Install dependencies
        working-directory: mcp-server
        run: npm ci
        
      - name: Test TypeScript compilation
        working-directory: mcp-server
        run: |
          echo "Testing TypeScript compilation..."
          npm run build
          
          # Verify output files exist
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi
          
          # Check for platform-specific code issues
          echo "Checking for platform-specific code..."
          grep -r "process.platform" src/ || true
          grep -r "os.platform" src/ || true
          
          echo "✅ Cross-compilation check passed"
          
      - name: Test native dependencies
        working-directory: mcp-server
        run: |
          echo "Checking for native dependencies..."
          
          # List all dependencies that might have native components
          npm ls 2>/dev/null | grep -E "node-gyp|prebuild|nan|bindings" || echo "No native dependencies detected"
          
          # Check package.json for optional dependencies
          if grep -q "optionalDependencies" package.json; then
            echo "⚠️ Optional dependencies found - verify they're truly optional"
            cat package.json | jq '.optionalDependencies'
          fi
          
          echo "✅ Native dependency check completed"

  compatibility-matrix:
    name: Compatibility Report
    runs-on: ubuntu-latest
    needs: [build-matrix, cross-compile-test]
    if: always()
    
    steps:
      - name: Generate compatibility matrix
        run: |
          echo "# Multi-Architecture Compatibility Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Architecture Support Matrix" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture | Platform | Device | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| armhf | linux/arm/v6 | Raspberry Pi 2 | ${{ needs.build-matrix.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| armv7 | linux/arm/v7 | Raspberry Pi 3/4 (32-bit) | ${{ needs.build-matrix.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| aarch64 | linux/arm64 | Raspberry Pi 4 (64-bit) | ${{ needs.build-matrix.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| amd64 | linux/amd64 | Intel/AMD 64-bit | ${{ needs.build-matrix.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| i386 | linux/386 | Intel/AMD 32-bit | ${{ needs.build-matrix.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-arch builds:** ${{ needs.build-matrix.result == 'success' && '✅ All architectures built successfully' || '❌ Some architectures failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cross-compilation:** ${{ needs.cross-compile-test.result == 'success' && '✅ TypeScript compilation successful' || '❌ Compilation issues detected' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Home Assistant Compatibility" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This add-on has been validated for the following Home Assistant installation types:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Home Assistant OS (all architectures)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Home Assistant Supervised (all architectures)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Home Assistant Container (with Supervisor)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Set exit code based on results
          if [[ "${{ needs.build-matrix.result }}" != "success" ]] || \
             [[ "${{ needs.cross-compile-test.result }}" != "success" ]]; then
            echo "❌ Multi-architecture validation failed"
            exit 1
          else
            echo "✅ Multi-architecture validation successful"
          fi
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🏗️ Multi-Architecture Build Status
            
            | Architecture | Status |
            |--------------|--------|
            | armhf (RPi 2) | ${{ needs.build-matrix.result == 'success' && '✅' || '❌' }} |
            | armv7 (RPi 3/4 32-bit) | ${{ needs.build-matrix.result == 'success' && '✅' || '❌' }} |
            | aarch64 (RPi 4 64-bit) | ${{ needs.build-matrix.result == 'success' && '✅' || '❌' }} |
            | amd64 (x86_64) | ${{ needs.build-matrix.result == 'success' && '✅' || '❌' }} |
            | i386 (x86) | ${{ needs.build-matrix.result == 'success' && '✅' || '❌' }} |
            
            **Cross-compilation:** ${{ needs.cross-compile-test.result == 'success' && '✅ Passed' || '❌ Failed' }}
            
            All architectures required for Home Assistant compatibility have been validated.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });