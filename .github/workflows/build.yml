name: Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  COVERAGE_THRESHOLD: 90

jobs:
  test:
    name: Test Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json
      
      - name: Install dependencies
        working-directory: mcp-server
        run: npm ci
      
      - name: Run linter
        working-directory: mcp-server
        run: npm run lint || echo "Linter not configured"
      
      - name: Run tests with coverage
        working-directory: mcp-server
        run: npm run test:coverage || npm test
      
      - name: Check coverage threshold
        if: matrix.node-version == 20
        working-directory: mcp-server
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            coverage=$(node -e "const c=require('./coverage/coverage-summary.json'); console.log(c.total.lines.pct)")
            echo "Coverage: $coverage%"
            if (( $(echo "$coverage < $COVERAGE_THRESHOLD" | bc -l) )); then
              echo "Coverage $coverage% is below threshold of $COVERAGE_THRESHOLD%"
              exit 1
            fi
          fi
      
      - name: Upload coverage reports
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          directory: mcp-server/coverage
          flags: unittests
          fail_ci_if_error: false

  build-addon:
    name: Build Add-on (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armhf, armv7, aarch64, amd64, i386]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build MCP server
        working-directory: mcp-server
        run: |
          npm ci
          npm run build
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: mcp-server
          platforms: linux/${{ matrix.arch == 'armhf' && 'arm/v6' || matrix.arch == 'armv7' && 'arm/v7' || matrix.arch == 'i386' && '386' || matrix.arch }}
          push: false
          tags: homeassistant-mcp:${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Validate add-on config
        run: |
          python3 -c "
          import yaml
          import sys
          with open('mcp-server/config.yaml', 'r') as f:
              config = yaml.safe_load(f)
          required_fields = ['name', 'version', 'slug', 'description', 'arch', 'startup', 'boot']
          missing = [field for field in required_fields if field not in config]
          if missing:
              print(f'Missing required fields: {missing}')
              sys.exit(1)
          if '${{ matrix.arch }}' not in config.get('arch', []):
              print(f'Architecture ${{ matrix.arch }} not in supported architectures')
              sys.exit(1)
          print('Add-on config validation passed')
          "

  validate-structure:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check required files
        run: |
          required_files=(
            "mcp-server/config.yaml"
            "mcp-server/Dockerfile"
            "mcp-server/run.sh"
            "mcp-server/package.json"
            "mcp-server/tsconfig.json"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Missing required file: $file"
              exit 1
            fi
          done
          
          echo "All required files present"
      
      - name: Validate TypeScript config
        working-directory: mcp-server
        run: |
          npm ci
          npx tsc --noEmit

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [test, build-addon, validate-structure]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ Tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-addon.result }}" == "success" ]; then
            echo "✅ Multi-architecture build successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.validate-structure.result }}" == "success" ]; then
            echo "✅ Project structure valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Project structure invalid" >> $GITHUB_STEP_SUMMARY
          fi