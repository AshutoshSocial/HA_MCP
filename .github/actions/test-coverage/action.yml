name: 'Test with Coverage'
description: 'Run tests with coverage reporting and threshold checking'
inputs:
  working-directory:
    description: 'Working directory for tests'
    required: false
    default: './mcp-server'
  node-version:
    description: 'Node.js version'
    required: false
    default: '20'
  coverage-threshold:
    description: 'Minimum coverage percentage'
    required: false
    default: '90'
  test-command:
    description: 'Test command to run'
    required: false
    default: 'npm test'
  upload-coverage:
    description: 'Upload coverage to Codecov'
    required: false
    default: 'true'
  codecov-token:
    description: 'Codecov token'
    required: false
    default: ''

outputs:
  coverage-percentage:
    description: 'Overall coverage percentage'
    value: ${{ steps.coverage.outputs.percentage }}
  coverage-passed:
    description: 'Whether coverage threshold was met'
    value: ${{ steps.coverage.outputs.passed }}
  test-results:
    description: 'Test results summary'
    value: ${{ steps.test.outputs.results }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json
    
    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        npm ci
        # Install coverage tools if not present
        npm list c8 || npm install -D c8
        npm list nyc || npm install -D nyc
    
    - name: Run tests with coverage
      id: test
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Check if coverage script exists
        if npm run | grep -q "test:coverage"; then
          npm run test:coverage
        elif npm run | grep -q "test:cov"; then
          npm run test:cov
        else
          # Run with c8 or nyc
          if command -v c8 &> /dev/null; then
            npx c8 --reporter=json --reporter=text --reporter=lcov ${{ inputs.test-command }}
          elif command -v nyc &> /dev/null; then
            npx nyc --reporter=json --reporter=text --reporter=lcov ${{ inputs.test-command }}
          else
            echo "No coverage tool found, running tests without coverage"
            ${{ inputs.test-command }}
          fi
        fi
        
        # Capture test results
        echo "::set-output name=results::Tests completed"
    
    - name: Check coverage threshold
      id: coverage
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        THRESHOLD=${{ inputs.coverage-threshold }}
        COVERAGE_FILE="coverage/coverage-summary.json"
        
        if [ -f "$COVERAGE_FILE" ]; then
          # Extract coverage percentage
          COVERAGE=$(cat $COVERAGE_FILE | jq -r '.total.lines.pct // .total.statements.pct // 0')
          echo "Coverage: ${COVERAGE}%"
          echo "::set-output name=percentage::${COVERAGE}"
          
          # Check against threshold
          if (( $(echo "$COVERAGE >= $THRESHOLD" | bc -l) )); then
            echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
            echo "::set-output name=passed::true"
          else
            echo "❌ Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
            echo "::set-output name=passed::false"
            exit 1
          fi
        else
          echo "Coverage file not found, checking alternative locations..."
          
          # Try alternative locations
          for dir in "." ".nyc_output" "coverage"; do
            if [ -f "$dir/coverage.json" ]; then
              COVERAGE=$(cat $dir/coverage.json | jq -r '.total.lines.pct // 0')
              echo "Coverage: ${COVERAGE}% (from $dir/coverage.json)"
              echo "::set-output name=percentage::${COVERAGE}"
              
              if (( $(echo "$COVERAGE >= $THRESHOLD" | bc -l) )); then
                echo "::set-output name=passed::true"
              else
                echo "::set-output name=passed::false"
                exit 1
              fi
              break
            fi
          done
        fi
    
    - name: Generate coverage report
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "coverage/coverage-summary.json" ]; then
          echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Display coverage summary
          cat coverage/coverage-summary.json | jq -r '
            .total | 
            "Lines: \(.lines.pct)% (\(.lines.covered)/\(.lines.total))\n" +
            "Statements: \(.statements.pct)% (\(.statements.covered)/\(.statements.total))\n" +
            "Functions: \(.functions.pct)% (\(.functions.covered)/\(.functions.total))\n" +
            "Branches: \(.branches.pct)% (\(.branches.covered)/\(.branches.total))"
          ' >> $GITHUB_STEP_SUMMARY
          
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Threshold**: ${{ inputs.coverage-threshold }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ steps.coverage.outputs.passed == 'true' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload coverage to Codecov
      if: inputs.upload-coverage == 'true' && inputs.codecov-token != ''
      uses: codecov/codecov-action@v4
      with:
        token: ${{ inputs.codecov-token }}
        directory: ${{ inputs.working-directory }}/coverage
        flags: unittests
        name: coverage-${{ inputs.node-version }}
        fail_ci_if_error: false
        verbose: true
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-node-${{ inputs.node-version }}
        path: |
          ${{ inputs.working-directory }}/coverage/
          ${{ inputs.working-directory }}/.nyc_output/
        retention-days: 7
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.percentage }}';
          const threshold = '${{ inputs.coverage-threshold }}';
          const passed = ${{ steps.coverage.outputs.passed }};
          
          const emoji = passed ? '✅' : '❌';
          const status = passed ? 'meets' : 'below';
          
          const comment = `## ${emoji} Test Coverage: ${coverage}%
          
          Coverage is ${status} the required threshold of ${threshold}%.
          
          | Type | Coverage |
          |------|----------|
          | Overall | ${coverage}% |
          | Threshold | ${threshold}% |
          | Status | ${passed ? 'Passed' : 'Failed'} |
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });